package com.tujia.os.gracefulshutdown.config;

import com.tujia.os.gracefulshutdown.ctrl.GracefulShutdownRunner;
import com.tujia.os.gracefulshutdown.ctrl.ShutdownWatcher;
import com.tujia.os.gracefulshutdown.endpoint.CheckUpEndPoint;
import com.tujia.os.gracefulshutdown.endpoint.RocketHealthCheckEndPoint;
import com.tujia.os.gracefulshutdown.properties.GracefulShutdownProperties;
import com.tujia.os.gracefulshutdown.service.AbstractGracefulShutdownService;
import com.tujia.os.gracefulshutdown.service.impl.TomcatGracefulShutdownImpl;
import com.tujia.os.gracefulshutdown.service.impl.UpstreamGracefulShutdownImpl;
import org.apache.catalina.startup.Tomcat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.boot.web.server.WebServerFactoryCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.servlet.Servlet;

/**
 * @author wenfei
 * @date 2018/11/16
 * @description:
 */
@Configuration
@EnableConfigurationProperties(GracefulShutdownProperties.class)
@ConditionalOnProperty(prefix = "management.gracefulshutdown", name = "enabled", havingValue = "true")
public class GracefulShutdownAutoConfiguration {

  @Autowired
  private GracefulShutdownProperties properties;

  @Bean
  @ConditionalOnMissingBean
  public ShutdownWatcher shutdownWatcher() {
    return new ShutdownWatcher();
  }

  @Bean
  public TomcatGracefulShutdownImpl gracefulShutdownTomcat() {
    return new TomcatGracefulShutdownImpl(properties.getTomcatShutdownTimeout(), 1);
  }

  /**
   * Customise the tomcat factory.
   *
   * @return an WebServerFactoryCustomizer
   */
  @Bean
  @ConditionalOnClass({Servlet.class, Tomcat.class})
//  @ConditionalOnBean(TomcatServletWebServerFactory.class)
  public WebServerFactoryCustomizer tomcatCustomizer() {
    return (WebServerFactoryCustomizer<TomcatServletWebServerFactory>) container
        -> container.addConnectorCustomizers(gracefulShutdownTomcat());
  }

  @Bean
  @ConditionalOnMissingBean
  public GracefulShutdownRunner<AbstractGracefulShutdownService> gracefulShutdownRunner() {
    return new GracefulShutdownRunner<>(t -> t.gracefulShutdown());
  }

  @Bean
  @ConditionalOnMissingBean
  public UpstreamGracefulShutdownImpl upstreamGracefulShudownImpl() {
    return new UpstreamGracefulShutdownImpl(properties.getUpstreamShutdownTimeout(), 0);
  }

  @Bean
  @ConditionalOnMissingBean
  public CheckUpEndPoint checkUpEndPoint() {
    return new CheckUpEndPoint();
  }

  @Bean
  @ConditionalOnMissingBean
  public RocketHealthCheckEndPoint healthCheckEndPoint() {
    return new RocketHealthCheckEndPoint();
  }
}
